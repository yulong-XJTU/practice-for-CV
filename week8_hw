#coding:utf-8
import torch
import torchvision
import torchvision.transforms as transforms
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim

transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=8,
                                          shuffle=True, num_workers=2)


class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 5 * 5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 16 * 5 * 5)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x


net1=Net()
net2=Net()
net3=Net()
net4=Net()
net5=Net()
net6=Net()
nets=[net1,net2,net3,net4,net5,net6]
criterion = nn.CrossEntropyLoss()


optim_SGD = optim.SGD(net1.parameters(), lr=0.01)
optim_mom = optim.SGD(net2.parameters(), lr = 0.01, momentum=0.9)
optim_Adagrad=optim.Adagrad(net3.parameters(), lr=0.01, lr_decay=0, weight_decay=0)
optim_Adadelta=optim.Adadelta(net4.parameters(), lr=1.0, rho=0.9, eps=1e-06, weight_decay=0)
optim_RMSprop=optim.RMSprop(net5.parameters(), lr=0.01, alpha=0.99, eps=1e-08, weight_decay=0, momentum=0, centered=False)
optim_Adam=optim.Adam(net6.parameters(), lr=0.001, betas=(0.9, 0.999), eps=1e-08, weight_decay=0)

optimizers=[optim_SGD,optim_mom,optim_Adagrad,optim_Adadelta,optim_RMSprop,optim_Adam]



accuracy=[[],[],[],[],[],[]]
loss_history=[[],[],[],[],[],[]]


for net,optimizer,index in zip(nets,optimizers,[0,1,2,3,4,5]):
    
    for epoch in range(10):  # loop over the dataset multiple times
        running_loss = 0.0
        correct=0
        for i, data in enumerate(trainloader, 0):
           # get the inputs; data is a list of [inputs, labels]
           inputs, labels = data

           # zero the parameter gradients
           optimizer.zero_grad()

           # forward + backward + optimize
           outputs = net(inputs)
           _, predicted = torch.max(outputs, 1)
           correct+=(predicted == labels).sum()
           loss = criterion(outputs, labels)
           loss.backward()
           optimizer.step()
           running_loss += loss.item()
           if i % 999== 0:    # record 1000 mini-batches
               accuracy[index].append(correct/1000.0)
               loss_history[index].append(running_loss)
               running_loss = 0.0
               correct=0
            
         

import matplotlib.pyplot as plt
plt.subplot(1,2,1)
plt.plot(loss_history[0])
plt.plot(loss_history[1])
plt.plot(loss_history[2])
plt.plot(loss_history[3])
plt.plot(loss_history[4])
plt.plot(loss_history[5])
plt.subplot(1,2,2)
plt.plot(accuracy[0])
plt.plot(accuracy[1])
plt.plot(accuracy[2])
plt.plot(accuracy[3])
plt.plot(accuracy[4])
plt.plot(accuracy[5])
