#coding:utf-8
# code for week2,recognize_computer_vision.py
# houchangligong,zhaomingming,20200520,
import torch
from itertools import product

def generate_data():
    # 本函数生成0-9，10个数字的图片矩阵
    image_data=[]
    num_0 = torch.tensor(
    [[0,0,1,1,0,0],
    [0,1,0,0,1,0],
    [0,1,0,0,1,0],
    [0,1,0,0,1,0],
    [0,0,1,1,0,0],
    [0,0,0,0,0,0]])
    image_data.append(num_0)
    num_1 = torch.tensor(
    [[0,0,0,1,0,0],
    [0,0,1,1,0,0],
    [0,0,0,1,0,0],
    [0,0,0,1,0,0],
    [0,0,1,1,1,0],
    [0,0,0,0,0,0]])
    image_data.append(num_1)
    num_2 = torch.tensor(
    [[0,0,1,1,0,0],
    [0,1,0,0,1,0],
    [0,0,0,1,0,0],
    [0,0,1,0,0,0],
    [0,1,1,1,1,0],
    [0,0,0,0,0,0]])
    image_data.append(num_2)
    num_3 = torch.tensor(
    [[0,0,1,1,0,0],
    [0,0,0,0,1,0],
    [0,0,1,1,0,0],
    [0,0,0,0,1,0],
    [0,0,1,1,0,0],
    [0,0,0,0,0,0]])
    image_data.append(num_3)
    num_4 = torch.tensor(
    [
    [0,0,0,0,1,0],
    [0,0,0,1,1,0],
    [0,0,1,0,1,0],
    [0,1,1,1,1,1],
    [0,0,0,0,1,0],
    [0,0,0,0,0,0]])
    image_data.append(num_4)
    num_5 = torch.tensor(
    [
    [0,1,1,1,0,0],
    [0,1,0,0,0,0],
    [0,1,1,1,0,0],
    [0,0,0,0,1,0],
    [0,1,1,1,0,0],
    [0,0,0,0,0,0]])
    image_data.append(num_5)
    num_6 = torch.tensor(
    [[0,0,1,1,0,0],
    [0,1,0,0,0,0],
    [0,1,1,1,0,0],
    [0,1,0,0,1,0],
    [0,0,1,1,0,0],
    [0,0,0,0,0,0]])
    image_data.append(num_6)
    num_7 = torch.tensor(
    [
    [0,1,1,1,1,0],
    [0,0,0,0,1,0],
    [0,0,0,1,0,0],
    [0,0,0,1,0,0],
    [0,0,0,1,0,0],
    [0,0,0,0,0,0]])
    image_data.append(num_7)
    num_8 = torch.tensor(
    [[0,0,1,1,0,0],
    [0,1,0,0,1,0],
    [0,0,1,1,0,0],
    [0,1,0,0,1,0],
    [0,0,1,1,0,0],
    [0,0,0,0,0,0]])
    image_data.append(num_8)
    num_9 = torch.tensor(
    [[0,0,1,1,1,0],
    [0,1,0,0,1,0],
    [0,0,1,1,1,0],
    [0,1,0,0,1,0],
    [0,0,0,0,1,0],
    [0,0,0,0,0,0]])
    image_data.append(num_9)
    image_label=[0,1,2,3,4,5,6,7,8,9]
    return image_data,image_label
    
def get_feature(x):
 #以36个像素点和bias为特征
    feature  =x.reshape(1,36)
    feature = feature.float()
    feature = torch.cat((feature,torch.tensor(1.0).view(1,1)),1)
    return feature
def get_feature_mat(image_data):
    #10幅图的特征和bias组成一个10*37的矩阵
    for i in range(10):
            feature  =get_feature(image_data[i])
            if i ==0:
                feature_mat=feature
            else: 
                feature_mat=torch.cat((feature_mat,feature),0)
    return feature_mat
    
    
def model(feature,weights):
     y=-1
     y= feature.mm(weights)
     return y


def train_model(image_data,weights):        
    feature_mat=get_feature_mat(image_data)
    #标签
    y=torch.tensor([0,1,2,3,4,5,6,7,8,9]).view(10,1)
    for epoch in range(0,2000):
        loss =torch.zeros(1,1)
        error=feature_mat.mm(weights)-y
        error=0.5*torch.pow(error,2)
        
        loss+=torch.sum(error,0)
        loss.backward()
        lr=0.01
        with torch.no_grad():
             weights-=lr*weights.grad
        weights.grad.zero_()
        if epoch%100==0: print("epoch=%s,loss=%s"%(epoch,loss))
    return weights

weights = torch.rand(37,1,requires_grad = True)
image_data,image_label = generate_data()
weights=train_model(image_data,weights)

print("对每张图片进行识别")
for i in range(10):
        x=image_data[i]
    #对当前图片提取特征
        feature=get_feature(x)
        # 对提取到得特征进行分类
        y = model(feature,weights)
    #打印出分类结果
        print("图像[%s]得分类结果是:[%s]"%(i,y))
        
        
        
'''对每张图片进行识别
图像[0]得分类结果是:[tensor([[-7.1973e-05]], grad_fn=<MmBackward>)]
图像[1]得分类结果是:[tensor([[0.9998]], grad_fn=<MmBackward>)]
图像[2]得分类结果是:[tensor([[2.0003]], grad_fn=<MmBackward>)]
图像[3]得分类结果是:[tensor([[3.0007]], grad_fn=<MmBackward>)]
图像[4]得分类结果是:[tensor([[4.0000]], grad_fn=<MmBackward>)]
图像[5]得分类结果是:[tensor([[4.9994]], grad_fn=<MmBackward>)]
图像[6]得分类结果是:[tensor([[6.0012]], grad_fn=<MmBackward>)]
图像[7]得分类结果是:[tensor([[7.0001]], grad_fn=<MmBackward>)]
图像[8]得分类结果是:[tensor([[7.9986]], grad_fn=<MmBackward>)]
图像[9]得分类结果是:[tensor([[9.0001]], grad_fn=<MmBackward>)]'''
