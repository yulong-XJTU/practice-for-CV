import numpy
import pycuda.autoinit
import pycuda.driver as cuda
from pycuda.compiler import SourceModule
 
TILE_W = 16
TILE_H = 16
KERNEL_RADIUS = 1#卷积核半径
KERNEL_W = 2 * KERNEL_RADIUS + 1#卷积核宽度
mod = SourceModule('''   
__global__ void convolutionGPU(float *d_Result,float *d_Data,float *d_Kernel ,int dataW ,int dataH )
{
    const  int   KERNEL_RADIUS=1;  
    const  int   KERNEL_W = 2 * KERNEL_RADIUS + 1;
    __shared__ float sPartials[KERNEL_W*KERNEL_W];//共享内存，用来存储卷积核
     int col = threadIdx.y + blockDim.y * blockIdx.y; 
     int row = threadIdx.x + blockDim.x * blockIdx.x;
     int gLoc = row + dataW*col;//计算过程卷积核中心所在位置
     
     for(int i=0 ;  i< KERNEL_W*KERNEL_W ; i+=1 )
     sPartials[i]= d_Kernel[i]; ;//复制kernel
    
     float sum = 0; 
     float value = 0;
    //卷积
     for(int i = -KERNEL_RADIUS; i<=KERNEL_RADIUS ; i++)
     	for(int j = -KERNEL_RADIUS; j<=KERNEL_RADIUS ;j++ ){  
          if( (col+j)<0 ||(row+i) < 0 ||(row+i) > (dataW-1) ||(col+j )>(dataH-1) )
          value = 0;
          else        
          value = d_Data[gLoc + i + j * dataH];
          sum += value * sPartials[(i+KERNEL_RADIUS) + (j+KERNEL_RADIUS)*KERNEL_W];
    }
       d_Result[gLoc] = sum;
 }
''')
       
convolutionGPU = mod.get_function("convolutionGPU") 
 
def convolution_cuda(sourceImage,filt):
    # Perform separable convolution on sourceImage using CUDA.
    destImage = sourceImage.copy()
    
    (imageHeight,  imageWidth) = sourceImage.shape
    filt = numpy.float32(filt)
    DATA_H = imageHeight;
    DATA_W = imageWidth
    DATA_H = numpy.int32(DATA_H)
    DATA_W = numpy.int32(DATA_W)
    # Prepare device arrays
 
    sourceImage_gpu = cuda.mem_alloc_like(sourceImage)#分配GPU内存
    filt_gpu = cuda.mem_alloc_like(filt)
    destImage_gpu = cuda.mem_alloc_like(sourceImage)
 
    cuda.memcpy_htod(sourceImage_gpu, sourceImage)#从CPU复制到GPU
    cuda.memcpy_htod(fil_gpu,filt)
 
    print ('star')
    convolutionGPU(destImage_gpu, sourceImage_gpu , filt_gpu,  DATA_W,  DATA_H  , block=(5,1,1), grid=(1,5))
    # Pull the data back from the GPU.
    cuda.memcpy_dtoh(destImage, destImage_gpu)#从GPU复制到CPU
    return destImage
 
 
def test_convolution_cuda():
    # Test the convolution kernel.
    # Generate or load a test image
    original = numpy.array(
                        [[1,1,1,0,0], 
                         [0,1,1,1,0], 
                         [0,0,1,1,1], 
                         [0,0,1,1,0], 
                         [0,1,1,0,0]
                         ])
    original = numpy.float32(original)
    print (original)
     
    filt = numpy.array([[1,0,1],[0,1,0],[1,0,1]
                ])
 
    destImage = original.copy()
    destImage[:] = numpy.nan
    destImage = convolution_cuda(original,  filt)
    # You probably wand to display the result image using the tool of your choice here.
    print ('Done running the convolution kernel!')
    print ( destImage)
if __name__ == '__main__':
    test_convolution_cuda()

